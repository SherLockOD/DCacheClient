//Package DCache comment
// This file war generated by tars2go 1.1
// Generated from ProxyShare.tars
package DCache

import (
	"fmt"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

//MainKeyConditionBS strcut implement
type MainKeyConditionBS struct {
	MainKey    []int8          `json:"mainKey"`
	Field      string          `json:"field"`
	Cond       [][]ConditionBS `json:"cond"`
	Limit      ConditionBS     `json:"limit"`
	BGetMKCout bool            `json:"bGetMKCout"`
}

func (st *MainKeyConditionBS) resetDefault() {
	st.BGetMKCout = false
}

//ReadFrom reads  from _is and put into struct.
func (st *MainKeyConditionBS) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.resetDefault()

	err, _, ty = _is.SkipToNoCheck(1, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}
		st.MainKey = make([]int8, length, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = _is.Read_int8(&st.MainKey[i0], 0, false)
			if err != nil {
				return err
			}
		}
	} else if ty == codec.SIMPLE_LIST {

		err, _ = _is.SkipTo(codec.BYTE, 0, true)
		if err != nil {
			return err
		}
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}
		err = _is.Read_slice_int8(&st.MainKey, length, true)
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}
	}

	err = _is.Read_string(&st.Field, 2, true)
	if err != nil {
		return err
	}

	err, _, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}
		st.Cond = make([][]ConditionBS, length, length)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {

			err, have, ty = _is.SkipToNoCheck(0, false)
			if err != nil {
				return err
			}
			if have {
				if ty == codec.LIST {
					err = _is.Read_int32(&length, 0, true)
					if err != nil {
						return err
					}
					st.Cond[i1] = make([]ConditionBS, length, length)
					for i2, e2 := int32(0), length; i2 < e2; i2++ {

						err = st.Cond[i1][i2].ReadBlock(_is, 0, false)
						if err != nil {
							return err
						}
					}
				} else if ty == codec.SIMPLE_LIST {
					err = fmt.Errorf("not support simple_list type")
					if err != nil {
						return err
					}
				} else {
					err = fmt.Errorf("require vector, but not")
					if err != nil {
						return err
					}
				}
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}
	}

	err = st.Limit.ReadBlock(_is, 4, true)
	if err != nil {
		return err
	}

	err = _is.Read_bool(&st.BGetMKCout, 5, true)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *MainKeyConditionBS) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.resetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require MainKeyConditionBS, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *MainKeyConditionBS) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.WriteHead(codec.SIMPLE_LIST, 1)
	if err != nil {
		return err
	}
	err = _os.WriteHead(codec.BYTE, 0)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(st.MainKey)), 0)
	if err != nil {
		return err
	}
	err = _os.Write_slice_int8(st.MainKey)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Field, 2)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(st.Cond)), 0)
	if err != nil {
		return err
	}
	for _, v := range st.Cond {

		err = _os.WriteHead(codec.LIST, 0)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(v)), 0)
		if err != nil {
			return err
		}
		for _, v := range v {

			err = v.WriteBlock(_os, 0)
			if err != nil {
				return err
			}
		}
	}

	err = st.Limit.WriteBlock(_os, 4)
	if err != nil {
		return err
	}

	err = _os.Write_bool(st.BGetMKCout, 5)
	if err != nil {
		return err
	}

	return nil
}

//WriteBlock encode struct
func (st *MainKeyConditionBS) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
