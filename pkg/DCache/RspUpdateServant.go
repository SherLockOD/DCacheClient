//Package DCache comment
// This file war generated by tars2go 1.1
// Generated from CacheShare.tars
package DCache

import (
	"fmt"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

//RspUpdateServant strcut implement
type RspUpdateServant struct {
	MpServant    map[string][]int32  `json:"mpServant"`
	MpServantKey map[string][]string `json:"mpServantKey"`
}

func (st *RspUpdateServant) resetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *RspUpdateServant) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.resetDefault()

	err, have = _is.SkipTo(codec.MAP, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&length, 0, true)
	if err != nil {
		return err
	}
	st.MpServant = make(map[string][]int32)
	for i0, e0 := int32(0), length; i0 < e0; i0++ {
		var k0 string
		var v0 []int32

		err = _is.Read_string(&k0, 0, false)
		if err != nil {
			return err
		}

		err, have, ty = _is.SkipToNoCheck(1, false)
		if err != nil {
			return err
		}
		if have {
			if ty == codec.LIST {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return err
				}
				v0 = make([]int32, length, length)
				for i1, e1 := int32(0), length; i1 < e1; i1++ {

					err = _is.Read_int32(&v0[i1], 0, false)
					if err != nil {
						return err
					}
				}
			} else if ty == codec.SIMPLE_LIST {
				err = fmt.Errorf("not support simple_list type")
				if err != nil {
					return err
				}
			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}
			}
		}

		st.MpServant[k0] = v0
	}

	err, have = _is.SkipTo(codec.MAP, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&length, 0, true)
	if err != nil {
		return err
	}
	st.MpServantKey = make(map[string][]string)
	for i2, e2 := int32(0), length; i2 < e2; i2++ {
		var k2 string
		var v2 []string

		err = _is.Read_string(&k2, 0, false)
		if err != nil {
			return err
		}

		err, have, ty = _is.SkipToNoCheck(1, false)
		if err != nil {
			return err
		}
		if have {
			if ty == codec.LIST {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return err
				}
				v2 = make([]string, length, length)
				for i3, e3 := int32(0), length; i3 < e3; i3++ {

					err = _is.Read_string(&v2[i3], 0, false)
					if err != nil {
						return err
					}
				}
			} else if ty == codec.SIMPLE_LIST {
				err = fmt.Errorf("not support simple_list type")
				if err != nil {
					return err
				}
			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}
			}
		}

		st.MpServantKey[k2] = v2
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *RspUpdateServant) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.resetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require RspUpdateServant, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *RspUpdateServant) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.WriteHead(codec.MAP, 1)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(st.MpServant)), 0)
	if err != nil {
		return err
	}
	for k4, v4 := range st.MpServant {

		err = _os.Write_string(k4, 0)
		if err != nil {
			return err
		}

		err = _os.WriteHead(codec.LIST, 1)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(v4)), 0)
		if err != nil {
			return err
		}
		for _, v := range v4 {

			err = _os.Write_int32(v, 0)
			if err != nil {
				return err
			}
		}
	}

	err = _os.WriteHead(codec.MAP, 2)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(st.MpServantKey)), 0)
	if err != nil {
		return err
	}
	for k5, v5 := range st.MpServantKey {

		err = _os.Write_string(k5, 0)
		if err != nil {
			return err
		}

		err = _os.WriteHead(codec.LIST, 1)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(v5)), 0)
		if err != nil {
			return err
		}
		for _, v := range v5 {

			err = _os.Write_string(v, 0)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

//WriteBlock encode struct
func (st *RspUpdateServant) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
