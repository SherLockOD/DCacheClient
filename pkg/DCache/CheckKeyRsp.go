//Package DCache comment
// This file war generated by tars2go 1.1
// Generated from ProxyShare.tars
package DCache

import (
	"fmt"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

//CheckKeyRsp strcut implement
type CheckKeyRsp struct {
	KeyStat map[string]SKeyStatus `json:"keyStat"`
}

func (st *CheckKeyRsp) resetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *CheckKeyRsp) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.resetDefault()

	err, have = _is.SkipTo(codec.MAP, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&length, 0, true)
	if err != nil {
		return err
	}
	st.KeyStat = make(map[string]SKeyStatus)
	for i0, e0 := int32(0), length; i0 < e0; i0++ {
		var k0 string
		var v0 SKeyStatus

		err = _is.Read_string(&k0, 0, false)
		if err != nil {
			return err
		}

		err = v0.ReadBlock(_is, 1, false)
		if err != nil {
			return err
		}

		st.KeyStat[k0] = v0
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CheckKeyRsp) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.resetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CheckKeyRsp, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CheckKeyRsp) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.WriteHead(codec.MAP, 1)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(st.KeyStat)), 0)
	if err != nil {
		return err
	}
	for k1, v1 := range st.KeyStat {

		err = _os.Write_string(k1, 0)
		if err != nil {
			return err
		}

		err = v1.WriteBlock(_os, 1)
		if err != nil {
			return err
		}
	}

	return nil
}

//WriteBlock encode struct
func (st *CheckKeyRsp) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
